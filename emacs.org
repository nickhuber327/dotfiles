#+TITLE: Emacs Config File
#+AUTHOR: Nicholas Huber
#+STARTUP: overview
#+PROPERTY: header-args:emacs-lisp :tangle /home/nick/.emacs.d/init.el

* File Header
#+begin_src emacs-lisp
  ;;;; Emacs Init File
  ;;; Nicholas Huber
  ;;; 20221128
#+end_src

* Customize Straight.el
#+begin_src emacs-lisp
  ;;; Customize Straight.el
  ;;Automatically install packages
  (setq straight-use-package-by-default t)
#+end_src

** Install Straight.el
#+begin_src emacs-lisp
  ;;; Install Straight.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
	(expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
       (bootstrap-version 6))
   (unless (file-exists-p bootstrap-file)
     (with-current-buffer
	 (url-retrieve-synchronously
	  "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	  'silent 'inhibit-cookies)
       (goto-char (point-max))
       (eval-print-last-sexp)))
   (load bootstrap-file nil 'nomessage))

  ;; Install use-package
  (straight-use-package 'use-package)
#+end_src

* Repos
** Initialize Repos
#+begin_src emacs-lisp
  ;;; Repos
  ;; Initialize Packages

  ;(require 'package)
  ;(setq package-archines '(("melpa" . "http://melpa.org/packages/")
  ;                         ("melpa-stable" . "http://stable.melpa.org/packages/")
  ;                         ("org" . "http://orgmode.org/elpa/")
  ;	 		    ("elpa" . "http://elpa.gnu.org/packages/")))
  ;(package-initialize)
  ;(unless (package-installed-p 'use-package)
  ;  (package-install 'use-package))

  ;(require 'use-package)
  ;(setq use-package-always-ensure t)
#+end_src

* Default Encoding
#+begin_src emacs-lisp
  ;;; Set default encoding system
  ;; Set to UTF-8

  (set-default-coding-systems 'utf-8)
#+end_src

* Start Emacs Server
#+begin_src emacs-lisp
  ;;; Start the Emacs Server
  (server-start)	
#+end_src

* Themes
#+begin_src emacs-lisp
  ;;; Themes
  (use-package spacegray-theme :defer t)
  (use-package doom-themes :defer t)

  ;; Load theme
  (load-theme 'doom-dark+ t)
  ;; (load-theme 'doom-challenger-deep t)
  ;;(load-theme 'doom-snazzy t)
  (doom-themes-visual-bell-config)
#+end_src

* Unicode Glyph Support
#+begin_src emacs-lisp
  ;;; Unicode Glyph Support
  (defun nh/replace-unicode-font-mapping (block-name old-font new-font)
    (let* ((block-idx (cl-position-if
		       (lambda (i) (string-equal (car i) block-name))
		       unicode-fonts-block-font-mapping))
	   (block-fonts (cadr (nth block-idx unicode-fonts-block-font-mapping)))
	   (updated-block (cl-substitute new-font old-font block-fonts :test 'string-equal)))
      (setf (cdr (nth block-idx unicode-fonts-block-font-mapping))
	    `(,updated-block))))

  (use-package unicode-fonts
    :custom (unicode-fonts-skip-font-groups '(low-quality-glyphs))
    :config (mapcar
	     (lambda (block-name)
	       (nh/replace-unicode-font-mapping block-name "Apple Color Emoji" "Noto Color Emoji"))
	     '("Dingbats"
	       "Emoticons"
	       "Miscellaneous Symbols and Pictographs"
	       "Transport and Map Symbols"))
    (unicode-fonts-setup))
#+end_src

* Emojis in Buffers
#+begin_src emacs-lisp
  ;;; Emojis in Buffers

  (use-package emojify
    :hook (erc-mode . emojify-mode)
    :commands emojify-mode)
#+end_src

* Ripgrep
#+begin_src emacs-lisp
  ;;; Ripgrep
  (use-package ripgrep)
#+end_src

* Modeline
** Basic Customization
#+begin_src emacs-lisp
  ;;; Modeline
  ;; Basic Customization

  (setq display-time-format "%k:%M %Y%m%d" ; format: 24h year month day
	display-time-default-load-average nil)
#+end_src

** Mode Diminishing
#+begin_src emacs-lisp
  ;; Enable mode diminishing

  (use-package diminish) ; Hides minor mode from modeline
#+end_src

** Smart Modeline
#+begin_src emacs-lisp
  ;; Smart Modeline
  ;; Prettifies modeline

  (use-package smart-mode-line
    :config
    (setq sml/no-confirm-load-theme t)
    (sml/setup)
    (sml/apply-theme 'respectful) ; Respects the themes colors
    (setq sml/mode-width 'right
	  sml/name-width 60)

    (setq-default mode-line-format
		  `("%e"
		    mode-line-front-space
		    evil-mode-line-tage
		    ;mode-line-mule-info
		    mode-line-client
		    mode-line-modified
		    mode-line-remote
		    mode-line-frame-identification
		    mode-line-buffer-identification
		    sml/pos-id-separator
		    (vc-mode bc-mode)
		    " "
		    ;mode-line-position
		    sml/pre-mode-separator
		    mode-line-modes
		    " "
		    mode-line-misc-info)))
  (smart-mode-line-enable 1)
#+end_src

** Doom Modeline
#+begin_src emacs-lisp
  ;; Doom Modeline
  ;; Install all the icons

  (use-package all-the-icons)

  ;; Hook minions to doom-modeline
  (use-package minions
    :hook (doom-modeline-mode . minions-mode))

  ;; Setup doom modeline
  (use-package doom-modeline
    :after eshell
    :hook (after-init . doom-modeline-init)
    :custom-face
    (mode-line ((t (:height 0.85))))
    (mode-line-inactive ((t (:height 0.85))))
    :custom
    (doom-modeline-height 15)
    (doom-modeline-bar-width 6)
    (doom-modeline-lsp t)
    (doom-modeline-github nil)
    (doom-modeline-mu4e nil)
    (doom-modeline-irc nil)
    (doom-modeline-minor-modes t)
    (doom-modline-persp-name nil)
    (doom-modeline-buffer-file-style 'truncate-except-project)
    (doom-modeline-major-mode-icon nil))
  (doom-modeline-mode 1)
#+end_src

* Keybinding
#+begin_src emacs-lisp
  ;;; Keybinding
  ;; Remap universal argument

  (global-set-key (kbd "C-M-u") 'universal-argument)

  ;; Escape cancels all

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  ;; Unsetting keys
  ;(global-unset-key (kbd "C-."))
#+end_src

** General
#+begin_src emacs-lisp
  ;; General
  (use-package general
    :config
    (general-evil-setup t)
    (general-create-definer nh/leader-keys
                            :states '(normal insert visual emacs)
                            :prefix "SPC"
                            :global-prefix "C-SPC")

    (general-create-definer nh/local-leader-keys
                            :states '(normal visual)
                            :keymaps 'override
                            :prefix ","
                            :global-prefix "SPC l"
                            ))
#+end_src

** Leader Keys
#+begin_src emacs-lisp
  ;; Leader keys

  (nh/leader-keys
    ":" '(execute-extended-command :which-key "M-x")
    "k" '(kill-emacs :which-key "Kill emacs")
    "b" '(:ignore t :which-key "buffer")
    "br" '(revert-buffer-quick :which-key "revert buffer")
    "be" '(eval-buffer :which-key "eval buffer")
    "bk" '(kill-current-buffer :wk "kill current buffer")
    "bK" '(kill-buffer :wk "Kill buffer")
    "f" '(:ignore t :which-key "files")
    "ff" '(find-file :which-key "find file"))
#+end_src

** Evil Mode
#+begin_src emacs-lisp
  ;; Evil Mode!!!
  ;; Define what modes need to begin in emacs mode
  (defun nh/evil-hook ()
    (dolist (mode '(eshell-mode
		    term-mode
		    shell-mode))
      (add-to-list 'evil-emacs-state-modes mode)))

  (use-package evil
	       :init
	       (setq evil-want-integration t)
	       (setq evil-want-keybinding nil)
	       (setq evil-want-C-u-scroll t)
	       (setq evil-want-C-d-scroll t)
	       (setq evil-want-C-i-jump nil)
	       :config
	       (add-hook 'evil-mode-hook 'nh/evil-hook)
	       (evil-mode 1)
	       (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
	       (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

	       ;; Use visual line motions even outside of visual-line-mode buffers
	       (evil-global-set-key 'motion "j" 'evil-next-visual-line)
	       (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

	       (evil-set-initial-state 'messages-buffer-mode 'normal)
	       (evil-set-initial-state 'dashboard-mode 'normal))

  ;; Evil Collection
  ;; Collection of evil mode configs for different modes
  (use-package evil-collection
	       :after evil
	       :config
	       (evil-collection-init))
#+end_src

* Embark
#+begin_src emacs-lisp
  ;;; Embark
  (use-package embark
    :bind
    (("C-h B" . embark-bindings)
     ("s-." . embark-act)
     ("s-," . embark-dwim)
     ("s-e" . embark-export)
     ("s-b" . embark-become))
    :general
    (nh/leader-keys
      "." '(embark-act :which-key "embark act")
      "," '(embark-dwim :which-key "embark dwim")
      "B" '(embark-become :which-key "embark become")
      "e" '(embark-export :which-key "embark export"))
    :init
    (setq prefix-help-command #'embark-prefix-help-command))

  (use-package embark-consult)
#+end_src

* Ace-Window
#+begin_src emacs-lisp
  ;;; Ace Window

  (use-package ace-window
    :bind (("M-o" . ace-window))
    :custom
    (aw-scope 'frame)
    (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    (aw-minibuffer-flag t)
    :config
    (ace-window-display-mode 1)
    (setq aw-dispatch-always t))

  (eval-when-compile
    (defmacro nh/embark-ace-action (fn)
      `(defun ,(intern (concat "nh/embark-ace-" (symbol-name fn))) ()
         (interactive)
         (with-demoted-errors "%s"
           (require 'ace-window)
           (let ((aw-dispatch-always t))
             (aw-switch-to-window (aw-select nil))
             (call-interactively (symbol-function ',fn)))))))

  (define-key embark-file-map     (kbd "o") (nh/embark-ace-action find-file))
  (define-key embark-buffer-map   (kbd "o") (nh/embark-ace-action switch-to-buffer))
  (define-key embark-bookmark-map (kbd "o") (nh/embark-ace-action bookmark-jump))

  (eval-when-compile
    (defmacro nh/embark-split-action (fn split-type)
      `(defun ,(intern (concat "nh/embark-"
                               (symbol-name fn)
                               "-"
                               (car (last  (split-string
                                            (symbol-name split-type) "-"))))) ()
         (interactive)
         (funcall #',split-type)
         (call-interactively #',fn))))

  (define-key embark-file-map     (kbd "2") (nh/embark-split-action find-file split-window-below))
  (define-key embark-buffer-map   (kbd "2") (nh/embark-split-action switch-to-buffer split-window-below))
  (define-key embark-bookmark-map (kbd "2") (nh/embark-split-action bookmark-jump split-window-below))

  (define-key embark-file-map     (kbd "3") (nh/embark-split-action find-file split-window-right))
  (define-key embark-buffer-map   (kbd "3") (nh/embark-split-action switch-to-buffer split-window-right))
  (define-key embark-bookmark-map (kbd "3") (nh/embark-split-action bookmark-jump split-window-right))
#+end_src

* Completion
#+begin_src emacs-lisp
  ;;; Completion Modes
#+end_src

** Orderless
#+begin_src emacs-lisp
  (use-package orderless
    :init
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file styles . (partial-completion)))))
#+end_src

** Consult
#+begin_src emacs-lisp
  ;; Consult

  (use-package consult
    :demand t
    :bind (("C-s" . consult-line)
	   ("C-M-l" . consult-imenu)
	   :map minibuffer-local-map
	   ("C-r" . consult-history))
    :custom
    (completion-in-region-function #'consult-completion-in-region))
#+end_src

** Which-key
#+begin_src emacs-lisp
  ;; Which-key
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))
#+end_src

** Vertico Mode
#+begin_src emacs-lisp
  ;; Vertico mode
  (use-package vertico
    :custom
    (vertico-cycle t)
    :custom-face
    (vertico-current ((t (:background "#3a3f5a"))))
    :init
    (vertico-mode))
#+end_src

** Savehist
#+begin_src emacs-lisp
  ;; Savehist
  (use-package savehist
    :init
    (savehist-mode))
#+end_src

** Marginalia
#+begin_src emacs-lisp
  ;; Marginalia
  (use-package marginalia
    :after vertico
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))
#+end_src

* GUI Options
#+begin_src emacs-lisp
  ;;; GUI Options
  ;; Customize GUI
  (global-display-line-numbers-mode 1)
  (column-number-mode 1)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

  ;; Turn off line numbers for some modes
  (dolist (mode '(term-mode-hook
		  shell-mode-hook
		  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

* EShell
#+begin_src emacs-lisp
  ;;; EShell

  (use-package eshell
    :commands eshell
    :config
    (setq eshell-destroy-buffer-when-process-dies t))

  ;; Better color

  (use-package xterm-color
    :after esh-mode
    :config
    (add-hook 'eshell-before-prompt-hook
              (lambda ()
                (setq xterm-color-preserve-properties t)))
    (add-to-list 'eshell-preoutput-filter-functions 'xterm-color-filter)
    (setq eshell-output-filter-functions
          (remove 'eshell-handle-ansi-color eshell-output-filter-functions))

    (setenv "TERM" "xterm-256color"))
#+end_src

* Magit
#+begin_src emacs-lisp
  (use-package magit
    :commands (magit-status magit-get-current-branch)
    :custom (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src
* Lisp
** Lisp Mode
#+begin_src emacs-lisp
  ;;; Lisp
  ;; Lisp Mode
  (use-package lisp-mode
    :straight nil
    :mode
    ("\\.lisp\\'" . lisp-mode)
    ("\\.ros\\'" . lisp-mode)
    :config
    (defun sly-ask ()
      (interactive)
      (let ((current-prefix-arg '(4)))
        (call-interactively #'sly)))
    :general
    (nh/local-leader-keys
      :keymaps 'lisp-mode-map
      "'" '(sly :which-key "sly")
      ";" '(sly-ask :which-key "sly(ask)")
      "c" '(:ignore t :which-key "compile")
      "cc" '(sly-compile-file :which-key "compile file")
      "cC" '(sly-compile-and-load-file :which-key "compile and load file")
      "cl" '(sly-load-file :which-key "load file")
      "e" '(sly-eval-buffer :which-key "evaluate buffer")
      "r" '(:ignore t :which-key "repl")
      "rc" '(sly-mrepl-clear-repl :which-key "clear")
      "rq" '(sly-quit-lisp :which-key "quit")
      "rr" '(sly-restart-inferior-lisp :which-key "restart")
      "rs" '(sly-mrepl-sync :which-key "sync")))      
#+end_src

** Lispy Mode
#+begin_src emacs-lisp
  ;; Lispy mode

  (use-package lispy
    :hook
    (emacs-lisp-mode . lispy-mode)
    (lisp-mode . lispy-mode))
#+end_src

** Lispyville
#+begin_src emacs-lisp
  ;; Lispyville
  ;; lispy mode integration for evil

  (use-package lispyville
    :hook (lispy-mode . lispyville-mode)
    :config
    (lispyville-set-key-theme '(operators c-w additional
                                additional-movement slurp/barf-cp
                                prettify)))
#+end_src

** Rainbow Delimiters
#+begin_src emacs-lisp
  ;; Rainbow Delimiters

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Sly
#+begin_src emacs-lisp
  ;; Sly

  (use-package sly
    :commands (sly sly-connect)
    :init
    (setq sly-symbol-completion-mode nil
          sly-default-lisp 'roswell
          sly-lisp-implementations
          `((sbcl ("sbcl") :coding-system uft-8-unix)
            (ccl ("ccl") :coding-system uft-8-unix)
            (roswell ("ros" "-Q" "run")))))
#+end_src

** Slime
#+begin_src emacs-lisp
  ;; Slime

  (use-package slime
    :disabled
    :mode "\\.lisp\\'")
#+end_src

* Markdown
#+begin_src emacs-lisp
  ;;; Markdown

  (use-package markdown-mode
    :mode ("README\\.md\\'" . gfm-mode)
    :init (setq markdown-command "marked")
    :general
    (nh/local-leader-keys
      :keymap 'gfm-mode-map
      "v" '(gfm-view-mode :which-key "view mode"))
    (nh/local-leader-keys
      :keymap 'gfm-view-mode-map
      "v" '(gfm-mode :which-key "markdown mode")))
#+end_src

* Org Mode
#+begin_src emacs-lisp
  ;;; Org mode

  (use-package org
    :mode ("\\.org\\'" . org-mode)
    :config
    (add-hook 'org-mode-hook 'nh/after-org-mode-load)
    (setq org-ellipsis " ▼"
          variable-pitch-mode 1
          org-hide-emphasis-markers t
          org-src-fontify-natively t
          org-fontify-quote-and-verse-blocks t
          org-src-tab-acts-natively t
          org-edit-src-content-indentation 2
          org-hide-block-startup nil
          org-src-preserve-indentation nil
          org-startup-folded 'contents
          org-cycle-separator-lines 2)
    :general
    (nh/local-leader-keys
     :keymaps 'org-mode-map
     "t" '(org-babel-tangle :which-key "tangle")
     "e" '(org-edit-special :which-key "edit"))
    (nh/local-leader-keys
      :keymaps 'org-src-mode-map
      "e" '(org-edit-src-exit :which-key "exit")))

  ;; Hook for after org mode loads
  (defun nh/after-org-mode-load ()
    "Set these after org mode loads"
    (visual-line-mode 1)
    (require 'org-indent)
    (org-indent-mode)
    (auto-fill-mode 0)
    (diminish org-indent-mode))

  (setq table-cell-horizantal-chars "\u2501")
  (setq table-cell-vertical-char ?\u2503)
  (setq table-cell-intersection-char ?\u2533)
#+end_src

** Superstar
#+begin_src emacs-lisp
  ;; Org Superstar
  ;;Get org-bullets
  (use-package org-bullets)

  ;; Config Superstar
  (use-package org-superstar
    :after org
    :hook (org-mode . org-superstar-mode)
    :custom
    (org-superstar-remove-leading-stars t)
    (org-superstar-headline-bullets-list '("⦿" "○" "‣" "⦿" "○" "‣" "⦿")))
#+end_src

** Org Tempo
#+begin_src emacs-lisp
  ;; Configure Org Tempo
  ;; allows expansions in org mode
  (use-package org-tempo
    :straight nil
    :config (setq org-structure-template-alist '(("sh" . "src shell")
						 ("el" . "src emacs-lisp")
						 ("lgr" . "src ledger")
						 ("lisp" . "src lisp")
						 ("tmux" . "src tmux")
						 ("hs" . "src haskell"))))
#+end_src

** Org Tmux
#+begin_src emacs-lisp
  ;; TMux
  (use-package ob-tmux)
#+end_src
** Org Ledger
#+begin_src emacs-lisp
  (straight-use-package
    '(ob-ledger :type git :local-repo "/home/nick/.emacs.d/lisp/ob-ledger"))
#+end_src

** Org Babel
#+begin_src emacs-lisp
  ;; Org Babel

  (org-babel-do-load-languages
    'org-babel-load-languages
    '((R . t)
      (lisp . t)
      (emacs-lisp . t)
      (gnuplot . t)
      (haskell . t)
      (latex . t)
      (ledger . t)
      (python . t)
      (sql . nil)
      (sqlite . t)
      (tmux . t)))
#+end_src

** Evil Org
#+begin_src emacs-lisp
  ;; Evil Org

  (use-package evil-org
    :hook (org-mode . evil-org-mode))
#+end_src

** Org Export SSH
#+begin_src emacs-lisp
  ;; Org Export SSH

  (use-package ox-ssh)
#+end_src

** Ledger
#+begin_src emacs-lisp
  ;; Ledger Mode
  (use-package ledger-mode
    :mode ("\\.lgr\\'" . ledger-mode))
#+end_src

** Evil Ledger
#+begin_src emacs-lisp
  ;; Evil Ledger Mode

  (use-package evil-ledger
    :hook (ledger-mode . evil-ledger-mode))
#+end_src
