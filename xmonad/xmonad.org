#+TITLE: Xmonad Config
#+AUTHOR: Nicholas Huber
#+STARTUP: overview
#+PROPERTY: header-args:haskell :tangle /home/nicholashuber/.dotfiles/xmonad/xmonad.hs

* File Header
#+begin_src haskell
  {- Xmonad Config File
     Nicholas Huber
     20211216
  -}
#+end_src
* Imports
#+begin_src haskell
  -- IMPORTS
#+end_src
** Base
#+begin_src haskell
-- Base Imports
  import XMonad
#+end_src
** Hooks
#+begin_src haskell
  -- Hooks
  import XMonad.Hooks.DynamicLog
  import XMonad.Hooks.ManageDocks
  import XMonad.Hooks.ManageHelpers
  import XMonad.Hooks.StatusBar
  import XMonad.Hooks.StatusBar.PP
  import XMonad.Hooks.EwmhDesktops
#+end_src
** Util
#+begin_src haskell
-- Utils
import XMonad.Util.EZConfig
import XMonad.Util.Loggers
import XMonad.Util.Ungrab
#+end_src
** Layout
#+begin_src haskell
-- Layout
import XMonad.Layout.Magnifier
import XMonad.Layout.ThreeColumns
import XMonad.Layout.Spacing
#+end_src
** Data
#+begin_src haskell
  -- Data
  import Data.Monoid
  import qualified Data.Map as M
#+end_src
* Variables
#+begin_src haskell
  -- Variables
  myModMask :: KeyMask
  myModMask = mod4Mask  --Sets modkey to Super

  myTerminal :: String
  myTerminal = "alacritty" -- Set default terminal to Alacritty

  myEditor :: String
  myEditor = "emacs" -- Set default editor to Emacs

  myBrowser :: String
  myBrowser = "firefox"

#+end_src
* Layouts
#+begin_src haskell
  -- Layout
  myLayout = tiled ||| Mirror tiled ||| Full ||| threeCol
    where
      threeCol = magnifiercz' 1.3 $ ThreeColMid nmaster delta ratio
      tiled    = Tall nmaster delta ratio
      nmaster  = 1      -- Default number of windows in the master pane
      ratio    = 1/2    -- Default proportion of screen occupied by master pane
      delta    = 3/100  -- Percent of screen to increment by when resizing panes
#+end_src
* Workspaces
#+begin_src haskell
  -- WorkSpaces
  myWorkSpaces = [ " Dev "
                 , " WWW "
                 , " Misc"
                 ]

  myWorkSpaceIndices = M.fromList $ zipWith (,) myWorkspaces [1..] -- (,) == \x y -> (x,y)
#+end_src
* Managehook
#+begin_src haskell
  -- Managehook
  myManageHook :: XMonad.Query (Data.Monoid.Endo WindowSet)
  myManageHook = composeAll
     [ className =? "Mozilla Firefox" --> doShift (myWorspaces !! 1)
     , className =? "dialog"          --> doFloat
#+end_src
* Keybindings
#+begin_src haskell
  -- Keybindings
  myKeys :: [(String, X ())]
  myKeys = [ ("M-b" , spawn (myBrowser))
           , ("M-<Return>" , spawn (myTerminal))
           , ("M-e" , spawn (myEditor))
           ]
#+end_src

* XMobar
#+begin_src haskell
  -- XMobar
  myXmobarPP :: PP
  myXmobarPP = def
      { ppSep             = magenta " â€¢ "
      , ppTitleSanitize   = xmobarStrip
      , ppCurrent         = wrap " " "" . xmobarBorder "Top" "#8be9fd" 2
      , ppHidden          = white . wrap " " ""
      , ppHiddenNoWindows = lowWhite . wrap " " ""
      , ppUrgent          = red . wrap (yellow "!") (yellow "!")
      , ppOrder           = \[ws, l, _, wins] -> [ws, l, wins]
      , ppExtras          = [logTitles formatFocused formatUnfocused]
      }
    where
      formatFocused   = wrap (white    "[") (white    "]") . magenta . ppWindow
      formatUnfocused = wrap (lowWhite "[") (lowWhite "]") . blue    . ppWindow

      -- | Windows should have *some* title, which should not not exceed a
      -- sane length.
      ppWindow :: String -> String
      ppWindow = xmobarRaw . (\w -> if null w then "untitled" else w) . shorten 30

      blue, lowWhite, magenta, red, white, yellow :: String -> String
      magenta  = xmobarColor "#ff79c6" ""
      blue     = xmobarColor "#bd93f9" ""
      white    = xmobarColor "#f8f8f2" ""
      yellow   = xmobarColor "#f1fa8c" ""
      red      = xmobarColor "#ff5555" ""
      lowWhite = xmobarColor "#bbbbbb" ""

#+end_src

* Config
#+begin_src haskell
  -- Config
  myConfig = def
     { modMask = myModMask
     , manageHook = myManageHook
     , layoutHook = myLayoutHook
     , terminal = myTerminal
     , workspaces = myWorkSpaces
     } ` additionalKeysP` myKeys
#+end_src
* Main
#+begin_src haskell
  -- Main
  main :: IO ()
  main = xmonad
       . ewmhFullscreen
       . ewmh
       . withEasySB (statusBarProp "xmobar" (pur myXmobarPP)) defToggleStrusKey
       $ myConfig
#+end_src
